import{X as u,S as d,a0 as h,Y as w,Z as g,_ as m,$ as f}from"./assets/NodeWSServerAdapter-147c623d.js";const l="v1",y=[];self.addEventListener("install",e=>{e.waitUntil(Promise.all([new Promise(async t=>{await u,d(f),t()}),caches.open(l).then(t=>{t.addAll(y)})]))});self.addEventListener("activate",e=>{e.waitUntil(clients.claim().then(()=>{const t=[l];return caches.keys().then(i=>Promise.all(i.map(r=>{if(t.indexOf(r)===-1)return caches.delete(r)})))}))});self.addEventListener("fetch",async e=>{new URL(e.request.url).pathname.includes("/automerge-repo")&&e.respondWith((async()=>{const i=new URL(e.request.url),r=new RegExp(".*/automerge-repo/(?<docUrl>automerge:[^/]+)/(?<path>.*)");let{docUrl:a,path:n}=i.pathname.match(r).groups;if(n=n.split("/"),!h(a))return new Response(`Invalid Automerge URL
${a}`,{status:500,headers:{"Content-Type":"text/plain"}});const s=await A.find(a).doc();if(!s)return new Response(`Document unavailable.
${a}`,{status:500,headers:{"Content-Type":"text/plain"}});if(n[0]==="package.json")return new Response(JSON.stringify(s));const o=n.reduce((c,p)=>c?.[p],s);return o?o.contentType?new Response(o.contents,{headers:{"Content-Type":o.contentType}}):new Response(`WHAT DO I DO????
${n}
${JSON.stringify(s)}`,{status:500,headers:{"Content-Type":"text/plain"}}):new Response(`Not found
Object path: ${n}
${JSON.stringify(s,null,2)}`,{status:404,headers:{"Content-Type":"text/plain"}})})())});console.log("Creating repo in SW!");const A=new w({storage:new g,network:[new m("wss://sync.automerge.org")],peerId:"shared-worker-"+Math.round(Math.random()*1e4),sharePolicy:async e=>e.includes("storage-server")});

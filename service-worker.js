import{a0 as f,a1 as g,a2 as m,a3 as y,a4 as b,_ as I,a5 as v,Y as S,Z as E,X as W,S as C,$ as M}from"./assets/index-8a91cad7.js";var r=null;typeof WebSocket<"u"?r=WebSocket:typeof MozWebSocket<"u"?r=MozWebSocket:typeof global<"u"?r=global.WebSocket||global.MozWebSocket:typeof window<"u"?r=window.WebSocket||window.MozWebSocket:typeof self<"u"&&(r=self.WebSocket||self.MozWebSocket);const h=r,A="1",c=f("WebsocketClient");class P extends b{socket}class T extends P{timerId;remotePeerId;#e=!1;url;constructor(e){super(),this.url=e}connect(e){this.socket&&(this.socket.removeEventListener("open",this.onOpen),this.socket.removeEventListener("close",this.onClose),this.socket.removeEventListener("message",this.onMessage)),this.timerId||(this.timerId=setInterval(()=>this.connect(e),5e3)),this.peerId=e,this.socket=new h(this.url),this.socket.binaryType="arraybuffer",this.socket.addEventListener("open",this.onOpen),this.socket.addEventListener("close",this.onClose),this.socket.addEventListener("message",this.onMessage),setTimeout(()=>{this.#e||(this.#e=!0,this.emit("ready",{network:this}))},1e3),this.join()}onOpen=()=>{c(`@ ${this.url}: open`),clearInterval(this.timerId),this.timerId=void 0,this.send(p(this.peerId))};onClose=()=>{c(`${this.url}: close`),this.remotePeerId&&this.emit("peer-disconnected",{peerId:this.remotePeerId}),this.timerId||this.peerId&&this.connect(this.peerId)};onMessage=e=>{this.receiveMessage(e.data)};join(){if(!this.socket)throw new Error("WTF, get a socket");this.socket.readyState===h.OPEN&&this.send(p(this.peerId))}disconnect(){if(!this.socket)throw new Error("WTF, get a socket");this.send({type:"leave",senderId:this.peerId})}send(e){if("data"in e&&e.data.byteLength===0)throw new Error("tried to send a zero-length message");if(!this.peerId)throw new Error("Why don't we have a PeerID?");if(!this.socket||this.socket.readyState!==h.OPEN)throw new Error("Websocket Socket not ready!");const s=g(e),n=s.buffer.slice(s.byteOffset,s.byteOffset+s.byteLength);this.socket?.send(n)}announceConnection(e){if(!this.peerId)throw new Error("we should have a peer ID by now");this.#e||(this.#e=!0,this.emit("ready",{network:this})),this.remotePeerId=e,this.emit("peer-candidate",{peerId:e})}receiveMessage(e){const s=m(new Uint8Array(e)),{type:n,senderId:o}=s;if(!this.socket)throw new Error("Missing socket at receiveMessage");if(e.byteLength===0)throw new Error("received a zero-length message");switch(n){case"peer":c(`peer: ${o}`),this.announceConnection(o);break;case"error":c(`error: ${s.message}`);break;default:if(!y(s))throw new Error("Invalid message received");this.emit("message",s)}}}function p(t){return{type:"join",senderId:t,supportedProtocolVersions:[A]}}f("WebsocketServer");const u="v1",O=[];async function L(){console.log("Creating repo");const t=new S({storage:new E,network:[new T("wss://sync.automerge.org")],peerId:"service-worker-"+Math.round(Math.random()*1e6),sharePolicy:async e=>e.includes("storage-server")});return await W,C(M),t}console.log("Before registration");const l=L();self.repo=l;self.addEventListener("install",t=>{console.log("Installing SW"),t.waitUntil(Promise.all([caches.open(u).then(e=>{e.addAll(O)})]).then(()=>self.skipWaiting()))});self.addEventListener("message",async t=>{if(console.log("Client messaged",t.data),t.data&&t.data.type==="INIT_PORT"){const e=t.ports[0];(await l).networkSubsystem.addNetworkAdapter(new I(e,{useWeakRef:!0}))}});async function R(){const t=[u],s=(await caches.keys()).map(n=>{if(!t.includes(n))return caches.delete(n)});await Promise.all(s)}self.addEventListener("activate",async t=>{console.log("Activating service worker."),await R(),clients.claim()});self.addEventListener("fetch",async t=>{const s=new URL(t.request.url).pathname.match(new RegExp("^.*/automerge-repo/(automerge:.*)"));s&&t.respondWith((async()=>{let[n,...o]=s[1].split("/");if(!v(n))return new Response(`Invalid Automerge URL
${n}`,{status:500,headers:{"Content-Type":"text/plain"}});const d=(await l).find(n),i=await d.doc();if(!i)return new Response(`Document unavailable.
${n}: ${d.state}`,{status:500,headers:{"Content-Type":"text/plain"}});if(o[0]==="package.json")return new Response(JSON.stringify(i));const a=o.reduce((w,k)=>w?.[k],i);return a?a.contentType?new Response(a.contents,{headers:{"Content-Type":a.contentType}}):new Response(`WHAT DO I DO????
${o}
${JSON.stringify(i)}`,{status:500,headers:{"Content-Type":"text/plain"}}):new Response(`Not found
Object path: ${o}
${JSON.stringify(i,null,2)}`,{status:404,headers:{"Content-Type":"text/plain"}})})())});

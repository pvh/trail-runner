import{C as w,F as y,I as v,T as S,U as k,a as M,c as O,b as C,d as P,e as R,f as L,g as A,h as b,i as E,j as _,k as I,l as j,m as U,n as B,o as W,p as N,q as T,r as $,s as J,t as D,u as q,v as x,w as F,x as z,y as H,z as K,A as V,B as X,D as G,E as Y,G as Q,H as Z,J as ee,K as te,L as oe,M as se,N as re,O as ne,P as ae,Q as ie,R as ce,S as m,V as le,W as de,X as ue,Y as pe,Z as ge,_ as me,$ as fe}from"./index.js";(function(){const o=document.createElement("link").relList;if(o&&o.supports&&o.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))a(t);new MutationObserver(t=>{for(const e of t)if(e.type==="childList")for(const s of e.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&a(s)}).observe(document,{childList:!0,subtree:!0});function c(t){const e={};return t.integrity&&(e.integrity=t.integrity),t.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?e.credentials="include":t.crossOrigin==="anonymous"?e.credentials="omit":e.credentials="same-origin",e}function a(t){if(t.ep)return;t.ep=!0;const e=c(t);fetch(t.href,e)}})();const he="modulepreload",we=function(r,o){return new URL(r,o).href},g={},ye=function(o,c,a){if(!c||c.length===0)return o();const t=document.getElementsByTagName("link");return Promise.all(c.map(e=>{if(e=we(e,a),e in g)return;g[e]=!0;const s=e.endsWith(".css"),d=s?'[rel="stylesheet"]':"";if(!!a)for(let i=t.length-1;i>=0;i--){const l=t[i];if(l.href===e&&(!s||l.rel==="stylesheet"))return}else if(document.querySelector(`link[href="${e}"]${d}`))return;const n=document.createElement("link");if(n.rel=s?"stylesheet":he,s||(n.as="script",n.crossOrigin=""),n.href=e,document.head.appendChild(n),s)return new Promise((i,l)=>{n.addEventListener("load",i),n.addEventListener("error",()=>l(new Error(`Unable to preload CSS for ${e}`)))})})).then(()=>o()).catch(e=>{const s=new Event("vite:preloadError",{cancelable:!0});if(s.payload=e,window.dispatchEvent(s),!s.defaultPrevented)throw e})},ve=Object.freeze(Object.defineProperty({__proto__:null,Counter:w,Float64:y,Int:v,Text:S,Uint:k,applyChanges:M,change:O,changeAt:C,clone:P,decodeChange:R,decodeSyncMessage:L,decodeSyncState:A,deleteAt:b,diff:E,dump:_,emptyChange:I,encodeChange:j,encodeSyncMessage:U,encodeSyncState:B,equals:W,free:N,from:T,generateSyncMessage:$,getActorId:J,getAllChanges:D,getBackend:q,getChanges:x,getConflicts:F,getHeads:z,getHistory:H,getLastLocalChange:K,getMissingDeps:V,getObjectId:X,init:G,initSyncState:Y,insertAt:Q,isAutomerge:Z,load:ee,loadIncremental:te,merge:oe,next:se,receiveSyncMessage:re,save:ne,saveIncremental:ae,saveSince:ie,toJS:ce,use:m,uuid:le,view:de},Symbol.toStringTag,{value:"Module"})),Se="automerge:2sbkVLjmSqdXqyP7XeFeY3ujMzub";async function ke(){const r=await navigator.serviceWorker.register("service-worker.js",{type:"module"});console.log("ServiceWorker registration successful with scope:",r.scope)}async function Me(){return await ue,m(fe),new pe({storage:new ge,network:[],peerId:"frontend-"+Math.round(Math.random()*1e4),sharePolicy:async o=>o.includes("service-worker")})}function f(r){if(!navigator.serviceWorker.controller){console.log("No service worker is controlling this tab right now.");return}const o=new MessageChannel;r.networkSubsystem.addNetworkAdapter(new me(o.port1)),navigator.serviceWorker.controller.postMessage({type:"INIT_PORT"},[o.port2])}navigator.serviceWorker.oncontrollerchange=function(){console.log("Controller changed!"),f(u)};await ke();const u=await Me();f(u);window.repo=u;window.Automerge=window.automerge=ve;window.process={env:{DEBUG_COLORS:"false"},browser:!0,versions:{},stderr:{},cwd:()=>"."};async function Oe(){const r=new URLSearchParams(window.location.search).get("app")||Se;console.log(`Booting from module at: ${r}`),console.log("Applying import map..."),window.esmsInitOptions={shimMode:!0,mapOverrides:!0},await ye(()=>import("./es-module-shims.js").then(h=>h.e),["./es-module-shims.js","./index.js"],import.meta.url);const o=`./automerge-repo/${r}/importMap`,a=await(await fetch(o)).json();importShim.addImportMap(a),console.log("Importing...");const t=`./automerge-repo/${r}/package.json`,s=await(await fetch(t)).json(),d=`./automerge-repo/${r}/fileContents/${s.module}`,p=new URL(d,window.location).toString(),n=await importShim(p);console.log("Module imported:",n),n.mount||console.error("Root module doesn't export a mount function",n);const i=new URLSearchParams(window.location.search),l=Object.fromEntries(i.entries());n.mount(document.getElementById("root"),l)}await navigator.serviceWorker.ready;Oe();

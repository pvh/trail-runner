import"./index-aa8104e2.js";import"./browser-f8dbb0d6.js";import"./CollectionSynchronizer-d734ae39.js";import{S as h}from"./StorageAdapter-3886844f.js";import"./_commonjsHelpers-de833af9.js";class P extends h{database;store;dbPromise;constructor(e="automerge",n="documents"){super(),this.database=e,this.store=n,this.dbPromise=this.createDatabasePromise()}createDatabasePromise(){return new Promise((e,n)=>{const t=indexedDB.open(this.database,1);t.onerror=()=>{n(t.error)},t.onupgradeneeded=o=>{o.target.result.createObjectStore(this.store)},t.onsuccess=o=>{const s=o.target.result;e(s)}})}async load(e){const t=(await this.dbPromise).transaction(this.store),s=t.objectStore(this.store).get(e);return new Promise((r,i)=>{t.onerror=()=>{i(s.error)},s.onsuccess=c=>{const a=c.target.result;a&&typeof a=="object"&&"binary"in a?r(a.binary):r(void 0)}})}async save(e,n){const o=(await this.dbPromise).transaction(this.store,"readwrite");return o.objectStore(this.store).put({key:e,binary:n},e),new Promise((r,i)=>{o.onerror=()=>{i(o.error)},o.oncomplete=()=>{r()}})}async remove(e){const t=(await this.dbPromise).transaction(this.store,"readwrite");return t.objectStore(this.store).delete(e),new Promise((s,r)=>{t.onerror=()=>{r(t.error)},t.oncomplete=()=>{s()}})}async loadRange(e){const n=await this.dbPromise,t=e,o=[...e,"￿"],s=IDBKeyRange.bound(t,o),r=n.transaction(this.store),c=r.objectStore(this.store).openCursor(s),a=[];return new Promise((b,u)=>{r.onerror=()=>{u(c.error)},c.onsuccess=m=>{const d=m.target.result;d?(a.push({data:d.value.binary,key:d.key}),d.continue()):b(a)}})}async removeRange(e){const n=await this.dbPromise,t=e,o=[...e,"￿"],s=IDBKeyRange.bound(t,o),r=n.transaction(this.store,"readwrite");return r.objectStore(this.store).delete(s),new Promise((c,a)=>{r.onerror=()=>{a(r.error)},r.oncomplete=()=>{c()}})}}export{P as IndexedDBStorageAdapter};

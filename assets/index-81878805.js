var s={};Object.defineProperty(s,"__esModule",{value:!0});s.declare=f;s.declarePreset=void 0;const c={assertVersion:r=>e=>{p(e,r.version)}};Object.assign(c,{targets:()=>()=>({}),assumption:()=>()=>{}});function f(r){return(e,t,o)=>{var a;let i;for(const l of Object.keys(c)){var u;e[l]||((u=i)!=null||(i=d(e)),i[l]=c[l](i))}return r((a=i)!=null?a:e,t||{},o)}}const b=f;s.declarePreset=b;function d(r){let e=null;return typeof r.version=="string"&&/^7\./.test(r.version)&&(e=Object.getPrototypeOf(r),e&&(!n(e,"version")||!n(e,"transform")||!n(e,"template")||!n(e,"types"))&&(e=null)),Object.assign({},e,r)}function n(r,e){return Object.prototype.hasOwnProperty.call(r,e)}function p(r,e){if(typeof r=="number"){if(!Number.isInteger(r))throw new Error("Expected string or integer value.");r=`^${r}.0.0-0`}if(typeof r!="string")throw new Error("Expected string or integer value.");const t=Error.stackTraceLimit;typeof t=="number"&&t<25&&(Error.stackTraceLimit=25);let o;throw e.slice(0,2)==="7."?o=new Error(`Requires Babel "^7.0.0-beta.41", but was loaded with "${e}". You'll need to update your @babel/core version.`):o=new Error(`Requires Babel "${r}", but was loaded with "${e}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`),typeof t=="number"&&(Error.stackTraceLimit=t),Object.assign(o,{code:"BABEL_VERSION_UNSUPPORTED",version:e,range:r})}export{s as l};
